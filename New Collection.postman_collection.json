{
	"info": {
		"_postman_id": "f097d82f-d1c7-4bcf-9e26-e6210c576b86",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44601298"
	},
	"item": [
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base URL}}/Books",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Saman karim khan\",\r\n   \"clientEmail\": \"samankarimkhan@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}/api-clients/",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - created and orderId\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('created');\r",
							"    pm.expect(responseData).to.have.property('orderId');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"OrderId is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.orderId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OrderId should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response JSON structure should match the schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('created');\r",
							"    pm.expect(responseData).to.have.property('orderId');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomNum = Math.floor(Math.random() * 1000);\r",
							"pm.variables.set(\"customerName\", `Customer_${randomNum}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "3f6cd8b6e6b2c20cedddfec3a6ffcdcbb6e48d5e5276670c056013627a5ea0da",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": \"1\",\r\n  \"customerName\": \"Shahwaiz\",\r\n  \"id\": \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}/orders",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order).to.include.all.keys('id', 'bookId', 'customerName', 'createdBy', 'quantity', 'timestamp');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate order properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order).to.be.an('object');\r",
							"        pm.expect(order.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"id should be a non-empty string\");\r",
							"        pm.expect(order.bookId).to.be.a('number').and.to.satisfy((num) => num >= 0, \"bookId should be a non-negative integer\");\r",
							"        pm.expect(order.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"customerName should be a non-empty string\");\r",
							"        pm.expect(order.createdBy).to.be.a('string').and.to.have.lengthOf.at.least(1, \"createdBy should be a non-empty string\");\r",
							"        pm.expect(order.quantity).to.be.a('number').and.to.satisfy((num) => num >= 0, \"quantity should be a non-negative integer\");\r",
							"        pm.expect(order.timestamp).to.be.a('number').and.to.satisfy((timestamp) => timestamp > 0, \"timestamp should be a valid timestamp\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "3f6cd8b6e6b2c20cedddfec3a6ffcdcbb6e48d5e5276670c056013627a5ea0da",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base URL}}/orders",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const order = pm.response.json();\r",
							"console.log(\"Order Details:\", order);\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Order ID matches\", () => {\r",
							"  pm.expect(order.id).to.eql(pm.collectionVariables.get(\"orderId\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "3f6cd8b6e6b2c20cedddfec3a6ffcdcbb6e48d5e5276670c056013627a5ea0da",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base URL}}/orders/w0fOPl4zW0v6qqzq2bLtm",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"orders",
						"w0fOPl4zW0v6qqzq2bLtm"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const updatedOrder = pm.response.json();\r",
							"console.log(\"Updated Order:\", updatedOrder);\r",
							"pm.test(\"Status code is 204\", () => {\r",
							"  pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "3f6cd8b6e6b2c20cedddfec3a6ffcdcbb6e48d5e5276670c056013627a5ea0da",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Sahar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}/orders/w0fOPl4zW0v6qqzq2bLtm",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"orders",
						"w0fOPl4zW0v6qqzq2bLtm"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {\r",
							"  pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "3f6cd8b6e6b2c20cedddfec3a6ffcdcbb6e48d5e5276670c056013627a5ea0da",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Base URL}}/orders/hLL5vywZ73uMT-hV8TIQ0",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"orders",
						"hLL5vywZ73uMT-hV8TIQ0"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const status = pm.response.json();\r",
							"console.log(\"API Status:\", status);\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"API is up and running\", () => {\r",
							"  pm.expect(status.status).to.eql(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base URL}}/status",
					"host": [
						"{{Base URL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		}
	]
}